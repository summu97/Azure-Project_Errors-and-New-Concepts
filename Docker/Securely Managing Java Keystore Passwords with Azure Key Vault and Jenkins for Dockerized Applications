1. Store password in Azure Key Vault
Secret Name: JAVA_KEYSTORE_PASSWORD
Value: changeit

2. Modify Dockerfile to accept build arg

# Use the OpenJDK 18 JDK Alpine base image
FROM eclipse-temurin:18-jdk

# Set the working directory
WORKDIR /app

# Copy the .jar file and the certificate file to the container
COPY build/libs/mailservice-0.0.1-SNAPSHOT.jar /app/app.jar

COPY certificate/certificate.crt /app/certificate.crt

# Install OpenSSL (Debian-based)
RUN apt-get update && apt-get install -y openssl

# Import the certificate into the Java keystore
ARG KEYSTORE_PASS

RUN keytool -importcert -keystore $JAVA_HOME/lib/security/cacerts \
    -storepass $KEYSTORE_PASS -noprompt -alias my_certificate -file /app/certificate.crt

EXPOSE 8089

# Set the command to run your Java application
CMD ["java", "-jar", "app.jar"]
---


3. Retrieve secret in Jenkins (or any CI) before building the Docker image:


        stage('Dockerize') {
            steps {
                script {
                    // Fetch the keystore password from Key Vault
                    def keystorePass = sh(
                        script: "az keyvault secret show --vault-name myvault --name JAVA_KEYSTORE_PASSWORD --query value -o tsv",
                        returnStdout: true
                    ).trim()
                    
                    sh """
                    mkdir -p $WORKSPACE/certificate
                    az keyvault secret show --name docker-crt --vault-name ${currentKeyVault} --query value -o tsv > $WORKSPACE/certificate/certificate.crt
                    sudo docker build --build-arg KEYSTORE_PASS='${keystorePass}' --network=host -t codaregistry.azurecr.io/${params.SERVICE_NAME}:${imageTag} .
                    echo $PASSWD | docker login codaregistry.azurecr.io -u $USERNAME --password-stdin
                    sudo docker push codaregistry.azurecr.io/${params.SERVICE_NAME}:${imageTag}
                    """
                }
            }
        }
