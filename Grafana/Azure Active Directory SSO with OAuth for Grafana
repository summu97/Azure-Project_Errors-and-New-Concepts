Link: https://youtu.be/CDB-AjhTdFE?si=WoFOlrWrKguONwax

üîÅ Step 1: Register Grafana in Azure Entra ID
Go to Azure Portal ‚Üí Microsoft Entra ID ‚Üí App registrations ‚Üí Click New registration
Name: Grafana
Redirect URI:
Type: Web
url: https://monitoring.afmsagaftrafund.org/login/generic_oauth
Click Register.

üîë Step 2: Create a Client Secret
In the App registration, go to Certificates & Secrets.
Click New client secret ‚Üí Add a name and expiry.
Copy and save the secret value.

üìã Step 3: Note Required Values
From the Azure App, you'll need:
| Value           | Where to Find                                                         |
| --------------- | --------------------------------------------------------------------- |
| `client_id`     | App registration ‚Üí Overview                                           |
| `client_secret` | Certificates & Secrets                                                |
| `tenant_id`     | Azure AD ‚Üí Overview                                                   |
| `auth_url`      | `https://login.microsoftonline.com/<tenant_id>/oauth2/v2.0/authorize` |
| `token_url`     | `https://login.microsoftonline.com/<tenant_id>/oauth2/v2.0/token`     |

ADD THESE
--------------------------------
4Ô∏è‚É£ Add a Redirect URI for Logout (optional)
Go to Authentication ‚Üí Add URI: https://<your-grafana-domain>/logout
save

5Ô∏è‚É£ Assign Users / Groups in Azure AD
Go to Enterprise Applications ‚Üí Your Grafana-SSO app.

Under Users and groups, add all users/groups who should have Grafana access.

6Ô∏è‚É£ Configure Grafana for Azure AD OAuth
Edit your grafana.ini (location depends on installation method, usually /etc/grafana/grafana.ini):

[server]
root_url = https://<your-grafana-domain>

[auth.generic_oauth]
enabled = true
name = Azure AD
allow_sign_up = true
client_id = <YOUR_CLIENT_ID>
client_secret = <YOUR_CLIENT_SECRET>
scopes = openid email profile
auth_url = https://login.microsoftonline.com/<YOUR_TENANT_ID>/oauth2/v2.0/authorize
token_url = https://login.microsoftonline.com/<YOUR_TENANT_ID>/oauth2/v2.0/token
api_url = https://graph.microsoft.com/oidc/userinfo
role_attribute_path = contains(groups[*], 'GrafanaAdmins') && 'Admin' || 'Viewer'
+++++++++++++++++++++++++++++++++++++++++++++
Present working content:

[auth.generic_oauth]
enabled = true
name = Azure AD
allow_sign_up = true
client_id = ${AZURE_CLIENT_ID}
client_secret = ${AZURE_CLIENT_SECRET}
scopes = openid email profile
auth_url = https://login.microsoftonline.com/2eb52881-f5b4-4855-9142-cd907aa33267/oauth2/v2.0/authorize
token_url = https://login.microsoftonline.com/2eb52881-f5b4-4855-9142-cd907aa33267/oauth2/v2.0/token
api_url = https://graph.microsoft.com/oidc/userinfo
role_attribute_path = contains(groups[*], '3c83305f-5ee5-455f-9d57-b784f4d61cc0') && 'Admin' || contains(groups[*], 'e2f44df0-34c0-49da-9e7f-200a07cf3956') && 'Editor'
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Replace:
<YOUR_CLIENT_ID> ‚Üí Application (client) ID
<YOUR_CLIENT_SECRET> ‚Üí Client secret value
<YOUR_TENANT_ID> ‚Üí Directory (tenant) ID
role_attribute_path ‚Üí Adjust if you want role mapping via Azure AD groups.

7Ô∏è‚É£ Restart Grafana
sudo systemctl restart grafana-server

--------------------------------
I see what‚Äôs happening ‚Äî your Grafana login with Entra ID is working, but once you log in as an Azure AD (Entra) user, you don‚Äôt see the "Data Sources" and "Connections" tabs.
That‚Äôs not an SSO problem ‚Äî it‚Äôs a permissions / role issue in Grafana.
Why This Happens
In Grafana:
Viewer role = can view dashboards, no access to configuration (including data sources).
Editor role = can create dashboards but still cannot add data sources.
Admin role = can configure everything (including data sources and connections).
When you use Entra ID SSO, Grafana assigns roles based on:
Default OAuth role settings
role_attribute_path mapping in grafana.ini (if configured)
Right now, your config says:
role_attribute_path = contains(groups[*], 'GrafanaAdmins') && 'Admin' || 'Viewer'
This means:
Only users who are members of the Azure AD group GrafanaAdmins get Admin role.
Everyone else is Viewer (so they won‚Äôt see Data Sources or Connections).
How to Fix
You have two options:
Option 1 ‚Äî Assign Your Azure AD User to the Admin Group
In Azure Portal ‚Üí Microsoft Entra ID ‚Üí Groups:
Create a group named GrafanaAdmins (exact name).
Add your Azure AD user(s) to this group.
In the Grafana App Registration ‚Üí Token Configuration:
Add a Group claim to be included in the ID token.
Restart Grafana and log in again.
Now, since your Entra user is in GrafanaAdmins, Grafana will assign Admin role automatically.
Option 2 ‚Äî Give All SSO Users Admin by Default (Not recommended for production)
In grafana.ini:
[auth.generic_oauth]
...
role_attribute_path = 'Admin'
Or set:
[users]
auto_assign_org_role = Admin
Then restart Grafana:
sudo systemctl restart grafana-server
This gives every SSO user full admin rights.
Recommended for You
Since you‚Äôre just setting this up, I‚Äôd suggest Option 1 ‚Äî create a GrafanaAdmins Azure AD group and map it to the Admin role. That way you can control exactly who can configure datasources without opening it up to everyone.
If you want, I can give you the exact Azure AD group claim configuration so Grafana gets group info in the token ‚Äî without that, role_attribute_path won‚Äôt work.
Do you want me to prepare that? That‚Äôs the missing link here.
----------------------------------
role_attribute_path = contains(groups[*], '<MONITORING_ADMINS_GROUP_ID>') && 'Admin' || 'Viewer'
----------------------------------
[auth]
disable_login_form = true
oauth_auto_login = true
 
[auth.basic]
enabled = false
-----------------------------------
Fetching credentials for grafana.ini using managed identity:
Alright ‚Äî here‚Äôs the **clear step‚Äëby‚Äëstep implementation** to make Grafana use your VM‚Äôs **Managed Identity** to fetch Azure AD SSO credentials (`TENANT_ID`, `CLIENT_ID`, `CLIENT_SECRET`) from **Azure Key Vault** at startup.

---

## **1Ô∏è‚É£ Prerequisites**

* Grafana is installed on an Azure VM.
* VM has **System-assigned Managed Identity** enabled.
* Key Vault has the secrets:

  * `TENANT_ID`
  * `CLIENT_ID`
  * `CLIENT_SECRET`
* Managed Identity has **`get`** and **`list`** permissions for Key Vault secrets.

---

### **Step 1 ‚Äî Give VM Managed Identity Key Vault Access**

```bash
# Get the VM's Managed Identity Object ID
az vm show \
  --resource-group <RG_NAME> \
  --name <VM_NAME> \
  --query identity.principalId \
  --output tsv
```

Then assign Key Vault permissions:

```bash
az keyvault set-policy \
  --name <YOUR_KEYVAULT_NAME> \
  --object-id <VM_ManagedIdentity_ObjectID> \
  --secret-permissions get list
```

---

### **Step 2 ‚Äî Test if VM Can Fetch Secrets**

SSH into the VM:

```bash
ssh <vm-user>@<vm-ip>
```

Run:

```bash
TENANT_ID=$(az keyvault secret show --vault-name <YOUR_KEYVAULT_NAME> --name TENANT_ID --query value -o tsv --identity)
CLIENT_ID=$(az keyvault secret show --vault-name <YOUR_KEYVAULT_NAME> --name CLIENT_ID --query value -o tsv --identity)
CLIENT_SECRET=$(az keyvault secret show --vault-name <YOUR_KEYVAULT_NAME> --name CLIENT_SECRET --query value -o tsv --identity)

echo "Tenant ID: $TENANT_ID"
echo "Client ID: $CLIENT_ID"
```

If you see values, permissions are working ‚úÖ

---

### **Step 3 ‚Äî Create a Script to Inject Secrets into Grafana**

Create:

```bash
sudo nano /usr/local/bin/grafana-azuread-secrets.sh
```

Paste:

```bash
#!/bin/bash

# Fetch secrets from Key Vault using Managed Identity
TENANT_ID=$(az keyvault secret show --vault-name <YOUR_KEYVAULT_NAME> --name TENANT_ID --query value -o tsv --identity)
CLIENT_ID=$(az keyvault secret show --vault-name <YOUR_KEYVAULT_NAME> --name CLIENT_ID --query value -o tsv --identity)
CLIENT_SECRET=$(az keyvault secret show --vault-name <YOUR_KEYVAULT_NAME> --name CLIENT_SECRET --query value -o tsv --identity)

# Export as environment variables for Grafana
export GF_AUTH_AZUREAD_ENABLED=true
export GF_AUTH_AZUREAD_ALLOW_SIGN_UP=true
export GF_AUTH_AZUREAD_CLIENT_ID=$CLIENT_ID
export GF_AUTH_AZUREAD_CLIENT_SECRET=$CLIENT_SECRET
export GF_AUTH_AZUREAD_SCOPES="openid email profile"
export GF_AUTH_AZUREAD_AUTH_URL="https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/authorize"
export GF_AUTH_AZUREAD_TOKEN_URL="https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token"

# Optional: Auto-login
export GF_AUTH_DISABLE_LOGIN_FORM=true
export GF_AUTH_OAUTH_AUTO_LOGIN=true

# Start Grafana
exec /usr/sbin/grafana-server --homepath=/usr/share/grafana --config=/etc/grafana/grafana.ini
```

Save & exit.

---

### **Step 4 ‚Äî Make the Script Executable**

```bash
sudo chmod +x /usr/local/bin/grafana-azuread-secrets.sh
```

---

### **Step 5 ‚Äî Modify Grafana Systemd Service**

Edit the service file:

```bash
sudo systemctl edit grafana-server
```

Paste:

```ini
[Service]
ExecStart=
ExecStart=/usr/local/bin/grafana-azuread-secrets.sh
```

---

### **Step 6 ‚Äî Reload & Restart Grafana**

```bash
sudo systemctl daemon-reload
sudo systemctl restart grafana-server
```

---

### **Step 7 ‚Äî Test**

* Open an **Incognito browser** and go to your Grafana URL.
* You should be **redirected to Microsoft Entra ID login** without needing to store secrets in `grafana.ini`.

---

This way:

* Secrets stay in **Key Vault**.
* Grafana VM uses **Managed Identity** to fetch them at startup.
* No hardcoded credentials on the server.

---

If you want, I can **add logging** to the script so you can see in `journalctl` every time Grafana fetches secrets from Key Vault.
Do you want me to include that logging version?

 
